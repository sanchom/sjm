import os

Import('env')
Import('test_env')
protobuf_env = env.Clone()
env = env.Clone()

binary_prefix = ARGUMENTS.get('BIN_PREFIX', '/usr/local/bin/')

protobuf_env.ProtoPy('sift_descriptors.proto')
protobuf_env.ProtoCc('sift_descriptors.proto')
protobuf_env.ProtoH('sift_descriptors.proto')

library_env = env.Clone()
library_env.Append(LIBS =
                ['opencv_core', 'opencv_highgui',
                 'png', 'jpeg', 'jasper', 'tiff',
                 'protobuf',
                 'vl'])
library_env.StaticLibrary('sift_lib',
                  ['vlfeat_extractor.cc',
                   'sift_util.cc',
                   'sift_descriptors.pb.cc'])

test_env.Prepend(LIBS = ['sift_lib'])
test_env.Append(LIBS =
                ['opencv_imgproc',
		 'opencv_core', 'opencv_highgui',
                 'png', 'jpeg', 'jasper', 'tiff',
                 'vl',
                 'protoc', 'protobuf',
                 'pthread',
                 'rt',
                 'boost_system',
                 'boost_filesystem'])

test_env.Program('vlsift_test.cc')
test_env.Program('sift_util_test.cc')

env.Prepend(LIBS = ['sift_lib'])
env.Append(LIBS = ['opencv_imgproc',
                   'opencv_core', 'opencv_highgui',
                   'protobuf',
                   'boost_program_options',
                   'boost_filesystem',
                   'boost_thread',
                   'boost_system',
                   'pthread',
                   'vl',
                   'png',
                   'jpeg',
                   'jasper',
                   'tiff',
                   ])

env.Program(['get_descriptor_info_cli.cc'])

static = ARGUMENTS.get('static', 0)
if int(static):
    env.Append(LIBS = ['rt',
                       'pthread',
                       'z',
                       ])
    static_env = env.Clone(LINKFLAGS='--static')
    static_obj = \
        static_env.Object('extract_descriptors_cli-static',
                          'extract_descriptors_cli.cc')
    prog = static_env.Program(static_obj)
    static_env.Install(binary_prefix, prog)
    static_env.Alias('install', binary_prefix)
else:
    shared_env = env.Clone()
    shared_env.Append(LIBS = ['pthread'])
    shared_obj = \
        shared_env.Object('extract_descriptors_cli',
                          'extract_descriptors_cli.cc')
    prog = shared_env.Program(shared_obj)
    shared_env.Install(binary_prefix, prog)
    shared_env.Alias('install', binary_prefix)
